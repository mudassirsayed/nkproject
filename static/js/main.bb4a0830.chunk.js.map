{"version":3,"sources":["component/NotesInput.js","component/NotesItem.js","component/NotesList.js","App.js","serviceWorker.js","index.js"],"names":["NotesInput","this","props","item","handleChange","handleSubmit","editItem","className","onSubmit","icon","faBook","type","name","placeholder","value","onChange","Component","NotesItem","title","handleDelete","handleEdit","onClick","faEdit","faTrash","NotesList","items","clearAll","map","key","id","App","state","uuid","e","setState","target","preventDefault","newItem","updatedItems","filteredItems","filter","selectedItems","find","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bb4a0830.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faBook } from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass NotesInput extends Component {\r\n    render() {\r\n        const { item, handleChange, handleSubmit, editItem } = this.props;\r\n        return (\r\n            <div className=\"card card-body my-3\">\r\n                <form onSubmit={handleSubmit}>\r\n                    <div className=\"input-group\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <div className=\"input-group-text bg-primary text-white\">\r\n                                <FontAwesomeIcon icon={faBook} />\r\n                            </div>\r\n                        </div>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control text-capitalize m-auto\"\r\n                            name=\"notes\" placeholder=\"Add your notes\"\r\n                            value={item}\r\n                            onChange={handleChange}\r\n                        />\r\n                        <button type=\"submit\"\r\n                            className={editItem\r\n                                ? \"btn btn-block btn-success mt-3\"\r\n                                : \"btn btn-block btn-primary mt-3\"}>\r\n                            {editItem ? \"Edit Notes\" : \"Create\"}</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NotesInput","import React, { Component } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faEdit,faTrash } from '@fortawesome/free-solid-svg-icons'\r\n \r\nclass NotesItem extends Component {\r\n    render() {\r\n        const {title,handleDelete,handleEdit} = this.props\r\n        return (\r\n            <div className=\"list-container\">\r\n            <li className=\"list-group-item text-capitalize d-flex justify-content-between my-2\">\r\n                <h6>{title}</h6>\r\n                <div className=\"notes-icon\">\r\n                    <span className=\"mx-2 text-success edit\" onClick={handleEdit}>\r\n                    <FontAwesomeIcon icon={faEdit} />\r\n                    </span>\r\n                    <span className=\"mx-2 text-danger delete\" onClick={handleDelete}>\r\n                    <FontAwesomeIcon icon={faTrash} />\r\n                    </span>\r\n                </div>\r\n            </li>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default NotesItem","import React, { Component } from 'react'\r\nimport NotesItem from './NotesItem';\r\nclass NotesList extends Component {\r\n    render() {\r\n        const { items, clearAll, handleDelete, handleEdit } = this.props\r\n        return (\r\n\r\n            <ul className=\"list-group my-5\">\r\n                <h3 className=\"text-capitalize text-center\">\r\n                    List of All Notes\r\n                </h3>\r\n                {items.map(item => {\r\n                    return <NotesItem\r\n                        key={item.id}\r\n                        title={item.title}\r\n                        handleDelete={() => handleDelete(item.id)}\r\n                        handleEdit={() => handleEdit(item.id)}\r\n                    />;\r\n                })\r\n                }\r\n\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-danger btn-block text-capitalize mt-5\"\r\n                    onClick={clearAll}\r\n                >\r\n                    Clear All\r\n                </button>\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NotesList","import React, { Component } from 'react';\nimport './App.css';\nimport NotesInput from \"./component/NotesInput\";\nimport NotesList from \"./component/NotesList\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport uuid from 'uuid';\n\nclass App extends Component {\n  state = {\n    items: [],\n    id: uuid(),\n    item: '',\n    editItem: false\n  }\n  handleChange = e => {\n    this.setState({\n      item: e.target.value\n    });\n  };\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const newItem = {\n      id: this.state.id,\n      title: this.state.item\n    };\n\n    const updatedItems = [...this.state.items, newItem];\n\n    this.setState({\n      items: updatedItems,\n      item: \"\",\n      id: uuid(),\n      editItem: false\n    });\n  };\n\n  clearAll = () => {\n    this.setState({\n      items: []\n    });\n  };\n\n  handleDelete = id => {\n    const filteredItems = this.state.items.filter(item =>\n      item.id !== id);\n    this.setState({\n      items: filteredItems\n    });\n  };\n\n  handleEdit = id => {\n    const filteredItems = this.state.items.filter(item =>\n      item.id !== id);\n\n    const selectedItems = this.state.items.find(item =>\n      item.id === id);\n\n    this.setState({\n      items: filteredItems,\n      item: selectedItems.title,\n      editItem: true,\n      id: id\n    });\n  };\n\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-10 mx-auto col-md-8 mt-4\">\n            <h3 className=\"text-capitalize text-center mb-4 my-4\">Notes</h3>\n            <NotesInput\n              item={this.state.item}\n              handleChange={this.handleChange}\n              handleSubmit={this.handleSubmit}\n              editItem={this.state.editItem} />\n            <NotesList\n              items={this.state.items}\n              clearAll={this.clearAll}\n              handleDelete={this.handleDelete}\n              handleEdit={this.handleEdit} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}